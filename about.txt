Certainly, I can guide you through the process of structuring your Go application, setting up APIs, and implementing JWT-based authentication for a bookstore scenario. Let's break it down step by step:

### 1. Project Structure

Here's a recommended project structure for your e-commerce bookstore application:

```
my_bookstore/
  ├── main.go             // Entry point of your application
  ├── controllers/        // Controllers handling API endpoints
  │   ├── auth.go
  │   ├── books.go
  │   ├── orders.go
  │   └── users.go
  ├── middleware/         // Middleware for authentication and error handling
  │   ├── auth_middleware.go
  │   └── error_middleware.go
  ├── models/             // Data models and database operations
  │   ├── book.go
  │   ├── order.go
  │   └── user.go
  ├── routes/             // Define API routes and groups
  │   └── routes.go
  ├── render/             // HTML rendering templates
  ├── static/             // Static files (e.g., images, CSS)
  ├── templates/          // HTML templates
  ├── config/             // Configuration files
  ├── utils/              // Utility functions
  ├── .env                // Environment variables (store secrets securely)
  └── README.md           // Project documentation
```

### 2. Setting Up API Routes

In your `routes/routes.go`, define your API routes and groups based on the role (user or admin) and the resource (books, orders, users). Here's a high-level overview:

- **User Routes**: These routes are accessible to all users.

```go
userGroup := router.Group("/users")
{
    userGroup.POST("/register", controllers.RegisterUser)
    userGroup.POST("/login", controllers.LoginUser)
    userGroup.GET("/books", controllers.GetAvailableBooks)
    userGroup.POST("/orders", controllers.CreateOrder)
    // Add more user-related routes as needed
}
```

- **Admin Routes**: These routes are accessible only to admins.

```go
adminGroup := router.Group("/admin")
{
    // Use JWT middleware to verify admin role
    adminGroup.Use(middleware.AdminAuthMiddleware())

    adminGroup.POST("/books", controllers.CreateBook)
    adminGroup.PUT("/books/:id", controllers.UpdateBook)
    adminGroup.DELETE("/books/:id", controllers.DeleteBook)
    adminGroup.GET("/orders", controllers.GetOrders)
    adminGroup.PUT("/orders/:id", controllers.UpdateOrderStatus)
    // Add more admin-related routes as needed
}
```

### 3. JWT-Based Authentication

Implement JWT-based authentication to secure your routes. You can use a library like `github.com/dgrijalva/jwt-go` for JWT handling.

#### Middleware for JWT Authentication

Create a middleware function for JWT authentication (`middleware/auth_middleware.go`). This middleware should verify the JWT token and extract user information.

```go
func AuthMiddleware() gin.HandlerFunc {
    return func(c *gin.Context) {
        tokenString := c.GetHeader("Authorization")
        if tokenString == "" {
            // Token is missing
            c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
            c.Abort()
            return
        }

        // Verify and parse the JWT token
        claims, err := utils.VerifyToken(tokenString)
        if err != nil {
            // Token is invalid
            c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
            c.Abort()
            return
        }

        // Set user information in the context
        c.Set("userID", claims.UserID)
        c.Set("userRole", claims.UserRole)
        c.Next()
    }
}
```

#### JWT Token Generation and Verification

Implement functions in your `utils` package for generating and verifying JWT tokens (`utils/jwt_utils.go`):

```go
// GenerateToken generates a JWT token for a user.
func GenerateToken(userID string, userRole string) (string, error) {
    // Create a new token
    token := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{
        "userID":   userID,
        "userRole": userRole,
        "exp":      time.Now().Add(time.Hour * 24).Unix(), // Token expiration time
    })

    // Sign the token with a secret key
    tokenString, err := token.SignedString([]byte(secretKey))
    if err != nil {
        return "", err
    }

    return tokenString, nil
}

// VerifyToken verifies a JWT token and returns the claims.
func VerifyToken(tokenString string) (*Claims, error) {
    token, err := jwt.ParseWithClaims(tokenString, &Claims{}, func(token *jwt.Token) (interface{}, error) {
        return []byte(secretKey), nil
    })

    if err != nil {
        return nil, err
    }

    if claims, ok := token.Claims.(*Claims); ok && token.Valid {
        return claims, nil
    }

    return nil, errors.New("invalid token")
}
```

### 4. Controllers and Models

Create controllers and models to handle business logic and interact with your database. For example, you may have controllers like `RegisterUser`, `LoginUser`, `CreateOrder`, `GetAvailableBooks`, etc. Each controller should validate input, perform actions, and return appropriate responses.

Models (`models/user.go`, `models/book.go`, `models/order.go`) should define your data structures and database operations.

### 5. Error Handling

Implement error handling middleware (`middleware/error_middleware.go`) to capture and handle errors gracefully. This middleware can format error responses and log errors.

### 6. Database

Connect your application to a database (e.g., PostgreSQL, MySQL) to store user data, book information, and orders. Use an ORM (e.g., GORM) or raw SQL queries to interact with the database.

### 7. User Registration and Login

Implement user registration and login functionality with proper validation and password hashing.

### 8. HTML Templates and Rendering

For rendering HTML templates, create templates in the `templates` directory and use a rendering library like `html/template` or a web framework's built-in rendering engine (e.g., Gin's HTML rendering).

### 9. Static Files

Store static files (e.g., images, CSS) in the `static` directory and serve them using a web server or middleware.

### 10. Testing

Write unit tests and integration tests for your controllers, models, and middleware to ensure the correctness of your application.

Remember to handle edge cases and add necessary error checks throughout your code.

This is a high-level overview of structuring your Go application for a bookstore scenario with JWT-based authentication. You can expand and customize it based on your specific requirements and use cases.